(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{362:function(t,s,a){"use strict";a.r(s);var r=a(25),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h4",{attrs:{id:"双重json字符串解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双重json字符串解决方案"}},[t._v("#")]),t._v(" 双重JSON字符串解决方案")]),t._v(" "),a("h5",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题:")]),t._v(" "),a("p",[t._v("直播业务里, h5需要通过广播来接收服务端的数据, 由于服务端的数据来自下游各个业务方, 由于golang的特性, 无法知道各个业务方具体数据类型,所以只能已字符串的形式传过来.App里h5要接收到广播首先是要通过一层native的透传才能拿到最新的广播数据,由于App端上直接对数据做了一层骚处理, 广播透传的数据就会出现了问题")]),t._v(" "),a("p",[t._v("我们看下App端接收到广播后,再做一次处理后的广播数据:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cmd"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"data"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"timestamp"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1606137120")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"widget_list"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"4"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sub_key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"support_task_info"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sub_data"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{\\"list\\":[{\\"max\\":5000,\\"current\\":2259,\\"name\\":\\"\\",\\"isFinish\\":0,\\"level\\":2,\\"taskType\\":5100,\\"act_id\\":28,\\"sort\\":6100},{\\"max\\":2,\\"current\\":0,\\"name\\":\\"\\",\\"isFinish\\":0,\\"level\\":0,\\"taskType\\":5400,\\"act_id\\":29,\\"sort\\":5400}],\\"assist\\":{\\"anchor\\":{\\"uname\\":\\"zbcs039\\",\\"face\\":\\"http://i0.hdslb.com/bfs/face/member/noface.jpg\\"},\\"assist\\":{\\"uname\\":\\"zbcs093\\",\\"face\\":\\"http://i0.hdslb.com/bfs/face/member/noface.jpg\\"}},\\"status\\":1,\\"url\\":\\"https://live.bilibili.com/activity/live-activity-battle/index.html?room_id=460730#/anchor-support\\",\\"config_info\\":{\\"bg_color\\":\\"#1C2663\\",\\"no_progress_color\\":\\"#FFFFFF\\",\\"yes_progress_color\\":\\"#FCD089\\",\\"level_font_color\\":\\"#DBA95F\\",\\"progress_font_color\\":\\"#3C326F\\",\\"task_font_color\\":\\"#FEE1AB\\",\\"list\\":null,\\"url\\":\\"https://live.bilibili.com/activity/live-activity-battle/index.html?room_id=460730#/anchor-support\\",\\"act_id\\":20}}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"recv_time"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-11-23 21:11:59"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这是一个字符串,本身前端拿到JSON字符串可以通过JSON.parse解析为可处理的对象, 但是这段JSON字符串里有个sub_data数据又是个JSON字符串,这样的双重JSON字符串会导致,前端接收到的上面的JSON字符串是有问题的,直接放在浏览器控制台打印出来会报错:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Uncaught SyntaxError"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Unexpected identifier\n")])])]),a("p",[t._v("那么如何处理呢?")]),t._v(" "),a("h5",{attrs:{id:"解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决办法"}},[t._v("#")]),t._v(" 解决办法")]),t._v(" "),a("ol",[a("li",[t._v("可以通过正则表达式匹配\n正则表达式匹配sub_data即可")]),t._v(" "),a("li",[t._v("这个方法比较独特, 会对测试同学相当不友好...\n首先服务端发送的广播中的sub_data是个字符串, 我们可以让服务端将这段字符串进行encodeURIComponent, 然后将整体传给App端上, 这样就不会是双重JSON了, 然后只需要h5接收到信息后将sub_data的数据重新decode即可.")])])])}),[],!1,null,null,null);s.default=e.exports}}]);